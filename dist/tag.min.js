var Tag=function(){function t(t){return"string"==typeof t&&t.trim().length>0}function e(t){var e,r,n,i={};if(!t||t.length<1)return i;for(r=0,n=t.length;n>r;r+=1)e=t[r].replace(/['\"\[\]]/g,"").split("="),i[e[0]]=e[1];return i}function r(t){var r="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",n="[\\x20\\t\\r\\n\\f]",i=r.replace("w","w#"),s=t.match(new RegExp("("+r.replace("w","w*")+")")),o=t.match(new RegExp("\\.("+r+")","g")),a=t.match(new RegExp("#("+r+")")),h=t.match(new RegExp("\\["+n+"*("+r+")"+n+"*(?:([*^$|!~]?=)"+n+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+i+")|)|)"+n+"*\\]","g"));return h=e(h),o=!o||o.length<1?"":o.join(" ").replace(/\./g,""),a=a?a[0].replace("#",""):void 0,o&&(h["class"]=o),a&&(h.id=a),{tag:s[0],attributes:h}}function n(t,e){var r=e.attributes;for(var n in r){var i=r[n];i&&t.setAttribute(n,i)}return t}function i(t){var e=document.createElement(t.name),r=document.createDocumentFragment();return t.children.length?(t.children.forEach(function(t){r.appendChild(i(t))}),e.appendChild(r)):e.innerText=t.innerText,n(e,t)}var s,o=/area|base|basefont|br|hr|input|img|link|meta/;return s=function(t){var e=r(t);this.name=e.tag,this.attributes=e.attributes,this.innerText="",this.children=[]},s.prototype.add=function(){var t,e,r=Array.prototype.slice.call(arguments);if(r.length)for(t=0,e=r.length;e>t;t+=1)this.children.push(r[t]);return this},s.prototype.getAttr=function(e){return t(e)?this.attributes[e]:void 0},s.prototype.setAttr=function(e,r){return t(e)&&t(r)&&(this.attributes[e]=r),this},s.prototype.addIf=function(t,e){return e instanceof s?t?this.add(e):this:void 0},s.prototype.setText=function(t){return this.innerText=String(t),this},s.prototype.addClass=function(t){var e=this.attributes["class"];return-1===e.indexOf(t)&&(this.attributes["class"]+=[" ",t].join("")),this},s.prototype.removeClass=function(e){var r,n=this.attributes["class"];return t(e)?(t(n)&&(n=n.split(" "),r=n.indexOf(e),r>-1&&(n.splice(r,1),this.attributes["class"]=n.join(" "))),this):this},s.prototype.removeClassIf=function(e,r){return e&&t(r)?this.removeClass(r):this},s.prototype.removeAttr=function(t){return delete this.attributes[t],this},s.prototype.removeAttrIf=function(e,r){return e&&t(r)?this.removeAttr(r):this},s.prototype.addAttr=function(e,r){var n;if("object"==typeof e){for(n in e)e.hasOwnProperty(n)&&!this.attributes[n]&&(this.attributes[n]=e[n]);return this}return t(e)&&t(r)&&(this.attributes[n]||(this.attributes[e]=r)),this},s.prototype.addAttrIf=function(t,e,r){return t?this.addAttr(e,r):this},s.prototype.addClassIf=function(t,e){return t?this.addClass(e):this},s.prototype.render=function(t){var e,r,n,s="",a=t||{format:"HTMLElement"},h=this.attributes,u=["<",this.name],p=this.children,c=o.test(this.name);if(window&&window.document&&"HTMLElement"===a.format)return i(this);if(h)for(n in h)h.hasOwnProperty(n)&&h[n]&&u.push(" ",n,'="',h[n],'"');if(c){if(u.push(" />"),p.length)throw["Nested content was provided for the tag name: ",this.name].join("")}else{for(u.push(">"),e=0,r=p.length;r>e;e+=1)s+="string"==typeof p[e]?p[e]:p[e].render();this.innerText.length>0&&u.push(this.innerText),s.length>0&&u.push(s),u.push(["</",this.name,">"].join(""))}return u.join("")},function(e){if(!t(e))throw"The selector provided does not supply a valid tag";return new s(e)}}();
//# sourceMappingURL=data:application/json;base64,
