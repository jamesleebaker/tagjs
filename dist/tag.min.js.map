{"version":3,"sources":["tag.js"],"names":["Tag","isString","str","trim","length","tokenizeAttributes","attrs","split","i","j","attributes","replace","parseSelector","selector","characterEncoding","whitespace","identifier","tag","match","RegExp","classes","id","join","undefined","setElementAttributes","element","attr","value","setAttribute","renderDOMFragment","container","document","createElement","name","fragment","createDocumentFragment","children","forEach","child","appendChild","innerText","SELF_CLOSING_TAGS","elementTokens","this","prototype","add","args","Array","slice","call","arguments","push","getAttr","setAttr","addIf","condition","setText","text","String","addClass","className","classAttr","indexOf","removeClass","attrIndex","splice","removeClassIf","removeAttr","attribute","removeAttrIf","addAttr","hasOwnProperty","addAttrIf","addClassIf","render","config","innerHtml","options","format","markup","isSelfClosing","test","window"],"mappings":"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","file":"tag.min.js","sourcesContent":["var Tag = (function(){\n  var SELF_CLOSING_TAGS = /area|base|basefont|br|hr|input|img|link|meta/,\n  Tag;\n\n  /**\n   * Determines if an argument is of type string and has a valid length\n   * @private\n   * @param  {String}  str A string of text\n   * @return {Boolean}\n   */\n  function isString(str) {\n    return typeof str === 'string' && str.trim().length > 0;\n  }\n\n  /**\n   * @private\n   * Transforms an array of DOM-style attributes(e.g. class=\"foo\") to a hash table\n   * @param  {String[]} attrs An array of DOM-style attributes\n   * @return {Object}\n   */\n  function tokenizeAttributes(attrs) {\n    var attributes = {},\n      split,\n      i,\n      j;\n\n    if(!attrs || attrs.length < 1) {\n      return attributes;\n    }\n\n    for (i = 0, j = attrs.length; i < j; i += 1) {\n      split = attrs[i].replace(/['\\\"\\[\\]]/g, '').split('=');\n      attributes[split[0]] = split[1];\n    }\n\n    return attributes;\n  }\n\n  /**\n   * @private\n   * Meticulously parses the CSS-style selector provided and produces an Object\n   * consisting of a tag name and the provided attributes\n   * @param  {String} selector The original CSS-style (Sizzle-style) selector\n   * @return {Object}          The transformed meta object for the selector\n   */\n  function parseSelector(selector) {\n    var characterEncoding = '(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+',\n      whitespace = '[\\\\x20\\\\t\\\\r\\\\n\\\\f]',\n      identifier = characterEncoding.replace('w', 'w#'),\n      tag = selector.match(new RegExp('(' + characterEncoding.replace('w', 'w*' ) + ')')),\n      //TODO: Classes RegEx needs to account for URLs and other 'periods' in the selector that aren't classes\n      classes = selector.match(new RegExp('\\\\.(' + characterEncoding + ')', 'g')),\n      id = selector.match(new RegExp( '#(' + characterEncoding + ')')),\n      attributes = selector.match(new RegExp( \"\\\\[\" + whitespace + \"*(\" + characterEncoding + \")\" + whitespace + \"*(?:([*^$|!~]?=)\" + whitespace + \"*(?:(['\\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|(\" + identifier + \")|)|)\" + whitespace + \"*\\\\]\", \"g\"));\n\n    attributes = tokenizeAttributes(attributes);\n    classes = !classes || classes.length < 1 ? '' : classes.join(' ').replace(/\\./g, '');\n    id = !id ? undefined : id[0].replace('#', '');\n\n    if(classes) {\n      attributes['class'] = classes;\n    }\n\n    if(id) {\n      attributes.id = id;\n    }\n\n    return {\n      tag : tag[0],\n      attributes: attributes\n    };\n  }\n\n  /**\n   * Adds the provided DOM attributes to the element from the provided tag's meta information\n   * @private\n   * @param {HTMLElement} element\n   * @param {HTMLElement} tag\n   */\n  function setElementAttributes(element, tag) {\n    var attributes = tag.attributes;\n\n    for(var attr in attributes) {\n      var value = attributes[attr];\n\n      if(value) {\n        element.setAttribute(attr, value);\n      }\n    }\n\n    return element;\n  }\n\n  /**\n   * Renders an HTMLELement-version of the tag and any children, recursively.\n   * @private\n   * @param  {tag} tag An instance of the Tag object\n   * @return {HTMLElement}     The resulting HTMLElement\n   */\n  function renderDOMFragment(tag) {\n    var container = document.createElement(tag.name),\n      fragment = document.createDocumentFragment();\n\n    if(!tag.children.length) {\n      container.innerText = tag.innerText;\n    } else {\n      tag.children.forEach(function(child) {\n        fragment.appendChild(renderDOMFragment(child));\n      });\n\n      container.appendChild(fragment);\n    }\n\n    return setElementAttributes(container, tag);\n  }\n\n  /**\n   * C'tor\n   @constructor\n   * @param  {String} selector The CSS-style selector that defines the tag to be\n   * created\n   * @return {Object}          The meta object representing the tag\n   */\n  Tag = function(selector){\n    var elementTokens = parseSelector(selector);\n\n    this.name = elementTokens.tag;\n    this.attributes = elementTokens.attributes;\n    this.innerText = '';\n    this.children = [];\n  };\n\n  /**\n   * Adds a child tag to the tag\n   * @return {Tag} This tag instance\n   */\n  Tag.prototype.add = function(){\n    var args = Array.prototype.slice.call(arguments),\n      i, j;\n\n    if(args.length) {\n      for (i = 0, j = args.length; i < j; i += 1) {\n        this.children.push(args[i]);\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Returns the current value of the provided attribute\n   * @param  {String} attr The attribute key\n   * @return {String}      The value of the attribute\n   */\n  Tag.prototype.getAttr = function(attr) {\n    if(isString(attr)) {\n      return this.attributes[attr];\n    }\n  };\n\n  /**\n   * Sets the value of the provided attribute. Unlike Tag.prototype.addAttr,\n   * This method is destructive.\n   * @param  {String} attr  The attribute key to add to the Tag\n   * @param  {String} value The value of the attribute to add to the Tag\n   * @return {tag}       This instance of the tag\n   */\n  Tag.prototype.setAttr = function(attr, value) {\n    if(isString(attr) && isString(value)) {\n      this.attributes[attr] = value;\n    }\n\n    return this;\n  };\n\n  /**\n   * If the provided condition is true, add the child tag\n   * @param  {Boolean} condition  The condition\n   * @param  {Tag} tag            The instance of the child tag\n   * @return {Tag}                This current tag instance\n   */\n  Tag.prototype.addIf = function(condition, tag) {\n    if(tag instanceof Tag) {\n      return condition ? this.add(tag) : this;\n    }\n  };\n\n  /**\n   * Sets the innerText of the tag. Useful for elements with no children\n   * who have a text value\n   * @param  {String} text The text value of the tag\n   * @return {Tag}      This instance of the tag\n   */\n  Tag.prototype.setText = function(text) {\n    this.innerText = String(text);\n    return this;\n  };\n\n  /**\n   * Add a CSS class to the tag\n   * @param  {String} className The CSS class name\n   * @return {Tag}           This instance of the tag\n   */\n  Tag.prototype.addClass = function(className) {\n    var classAttr = this.attributes['class'];\n\n    if(classAttr.indexOf(className) === -1) {\n      this.attributes['class'] += [' ', className].join('');\n    }\n\n    return this;\n  };\n\n  /**\n   * Removes a CSS class from the tag\n   * @param  {String} className The CSS class name\n   * @return {Tag}           This instance of the tag\n   */\n  Tag.prototype.removeClass = function(className) {\n    var classes = this.attributes['class'],\n      attrIndex;\n\n    if(!isString(className)) {\n      return this;\n    }\n\n    if(isString(classes)) {\n      classes = classes.split(' ');\n      attrIndex = classes.indexOf(className);\n\n       if(attrIndex > -1) {\n         classes.splice(attrIndex, 1);\n         this.attributes['class'] = classes.join(' ');\n       }\n    }\n\n    return this;\n  };\n\n  /**\n   * Remove the CSS class if the provided condition is true\n   * @param  {Boolean} condition The condition\n   * @param  {String} className The class name to remove from the tag\n   * @return {Tag}           This instance of the class\n   */\n  Tag.prototype.removeClassIf = function(condition, className) {\n    return condition && isString(className) ? this.removeClass(className) : this;\n  };\n\n  /**\n   * Remove the provided attribute from the tag\n   * @param  {String} attribute The attribute key\n   * @return {Tag}           This tag instance\n   */\n  Tag.prototype.removeAttr = function(attribute) {\n    delete this.attributes[attribute];\n    return this;\n  };\n\n  /**\n   * Remove the provided attribute if the provided condition is true\n   * @param  {Boolean} condition The condition\n   * @param  {String} attribute The key of the attribute to remove\n   * @return {Tag}           This tag instance\n   */\n  Tag.prototype.removeAttrIf = function(condition, attribute) {\n    return condition && isString(attribute) ? this.removeAttr(attribute) : this;\n  };\n\n  /**\n   * Add an attribute to the tag\n   * @param  {String} attribute The attribute key\n   * @param  {String} value     The attribute value\n   * @return {Tag}           This tag instance\n   */\n  Tag.prototype.addAttr = function(attribute, value) {\n    var attr;\n\n    if(typeof attribute === 'object') {\n      for(attr in attribute) {\n        if (attribute.hasOwnProperty(attr) && !this.attributes[attr]) {\n          this.attributes[attr] = attribute[attr];\n        }\n      }\n\n      return this;\n    }\n\n    if(isString(attribute) && isString(value)) {\n      if(!this.attributes[attr]) {\n        this.attributes[attribute] = value;\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Add an attribute to the tag if the provided condition is true\n   * @param  {Boolean} condition The condition\n   * @param  {String} attribute The attribute key\n   * @param  {String} value     The attribute value\n   * @return {Tag}           This tag instance\n   */\n  Tag.prototype.addAttrIf = function(condition, attribute, value) {\n    return condition ? this.addAttr(attribute, value) : this;\n  };\n\n  /**\n   * Adds the provided class if the provided condition is true\n   * @param  {Boolean} condition The condition\n   * @param  {String} className The class to add to the tag\n   * @return {Tag}           This tag instance\n   */\n  Tag.prototype.addClassIf = function(condition, className) {\n    return condition ? this.addClass(className) : this;\n  };\n\n  /**\n   * Renders the tag and its children recursively into either a string of text\n   * or an HTMLElement composed through a DOMFragment.\n   * @param  {Object} config An object of params for customizing how the tag\n   * will render. Currently, only one param is supported:\n   *   options: {\n   *   \t format: 'String | HTMLElement'\n   *   }\n   * @return {String|HTMLElement}        The resulting string || HTMLElement\n   */\n  Tag.prototype.render = function(config){\n    var innerHtml = '',\n      options = config || {\n        format: 'HTMLElement'\n      },\n      i,\n      j,\n      attributes = this.attributes,\n      markup = ['<', this.name],\n      children = this.children,\n      attribute,\n      isSelfClosing = SELF_CLOSING_TAGS.test(this.name);\n\n    if((window && window.document) && options.format === 'HTMLElement') {\n      return renderDOMFragment(this);\n    }\n\n    if(attributes) {\n      for (attribute in attributes) {\n        if(attributes.hasOwnProperty(attribute) && attributes[attribute]) {\n          markup.push(' ', attribute, '=\"', attributes[attribute], '\"');\n        }\n      }\n    }\n\n    if(isSelfClosing) {\n      markup.push(' />');\n\n      if(children.length) {\n        throw ['Nested content was provided for the tag name: ', this.name].join('');\n      }\n\n    } else {\n      markup.push('>');\n\n      for (i = 0, j = children.length; i < j; i += 1) {\n        // Accounting for already rendered tags\n        innerHtml += typeof children[i] === 'string' ? children[i] : children[i].render();\n      }\n\n      if(this.innerText.length > 0) {\n        markup.push(this.innerText);\n      }\n\n      if(innerHtml.length > 0) {\n        markup.push(innerHtml);\n      }\n\n      markup.push(['</', this.name, '>'].join(''));\n    }\n\n    return markup.join('');\n  };\n\n  return function(selector) {\n    if(!isString(selector)) {\n      throw 'The selector provided does not supply a valid tag';\n    }\n\n    return new Tag(selector);\n  };\n}());\n"],"sourceRoot":"/source/"}